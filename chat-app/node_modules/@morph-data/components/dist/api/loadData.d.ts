import { State } from './state';
declare class QueryState<T> extends State<T | undefined> {
    queryFn: () => Promise<T>;
    loading: boolean;
    private beforeInitialRequest;
    constructor(queryFn: () => Promise<T>);
    get value(): T | undefined;
    private queryAndSet;
    refresh(clearCache?: boolean): void;
}
type LoadDataType = "json" | "html" | "image" | "markdown" | (string & {});
type ResultType<T extends LoadDataType> = T extends "json" ? {
    count: number;
    items: Record<string, unknown>[];
} : T extends "html" ? string : T extends "image" ? string : T extends "markdown" ? string : unknown;
export declare const loadData: <T extends LoadDataType>(alias: string, type: T, variables?: Record<string, unknown>) => QueryState<ResultType<T>>;
export {};
