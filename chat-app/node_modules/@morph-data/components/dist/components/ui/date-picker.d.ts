import { Locale } from 'date-fns';
import { Matcher } from './calendar';
type DateRange = {
    from: Date | undefined;
    to?: Date | undefined;
};
interface Preset {
    label: string;
}
interface DatePreset extends Preset {
    date: Date;
}
interface DateRangePreset extends Preset {
    dateRange: DateRange;
}
type CalendarProps = {
    fromYear?: number;
    toYear?: number;
    fromMonth?: Date;
    toMonth?: Date;
    fromDay?: Date;
    toDay?: Date;
    fromDate?: Date;
    toDate?: Date;
    locale?: Locale;
};
type Translations = {
    cancel?: string;
    apply?: string;
    start?: string;
    end?: string;
    range?: string;
};
interface PickerProps extends CalendarProps {
    className?: string;
    disabled?: boolean;
    disabledDays?: Matcher | Matcher[] | undefined;
    required?: boolean;
    showTimePicker?: boolean;
    placeholder?: string;
    enableYearNavigation?: boolean;
    disableNavigation?: boolean;
    hasError?: boolean;
    id?: string;
    translations?: Translations;
    align?: "center" | "end" | "start";
    "aria-invalid"?: boolean;
    "aria-label"?: string;
    "aria-labelledby"?: string;
    "aria-required"?: boolean;
}
type SingleDatePickerProps = {
    presets?: DatePreset[];
    defaultValue?: Date;
    value?: Date;
    onChange?: (date: Date | undefined) => void;
} & PickerProps;
declare const DatePicker: {
    ({ presets, ...props }: SingleDatePickerProps): import("react/jsx-runtime").JSX.Element;
    displayName: string;
};
type RangeDatePickerProps = {
    presets?: DateRangePreset[];
    defaultValue?: DateRange;
    value?: DateRange;
    onChange?: (dateRange: DateRange | undefined) => void;
} & PickerProps;
declare const DateRangePicker: {
    ({ presets, ...props }: RangeDatePickerProps): import("react/jsx-runtime").JSX.Element;
    displayName: string;
};
export { DatePicker, DateRangePicker, type DatePreset, type DateRangePreset, type DateRange, };
