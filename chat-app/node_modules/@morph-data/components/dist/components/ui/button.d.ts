import { default as React } from 'react';
import { VariantProps } from 'tailwind-variants';
declare const buttonVariants: import('tailwind-variants').TVReturnType<{
    size: {
        sm: string;
        md: string;
        lg: string;
    };
    variant: {
        primary: string[];
        secondary: string[];
        light: string[];
        ghost: string[];
        destructive: string[];
    };
}, undefined, (string | string[])[], import('tailwind-variants/dist/config.js').TVConfig<{
    size: {
        sm: string;
        md: string;
        lg: string;
    };
    variant: {
        primary: string[];
        secondary: string[];
        light: string[];
        ghost: string[];
        destructive: string[];
    };
}, {
    size: {
        sm: string;
        md: string;
        lg: string;
    };
    variant: {
        primary: string[];
        secondary: string[];
        light: string[];
        ghost: string[];
        destructive: string[];
    };
}>, {
    size: {
        sm: string;
        md: string;
        lg: string;
    };
    variant: {
        primary: string[];
        secondary: string[];
        light: string[];
        ghost: string[];
        destructive: string[];
    };
}, undefined, import('tailwind-variants').TVReturnType<{
    size: {
        sm: string;
        md: string;
        lg: string;
    };
    variant: {
        primary: string[];
        secondary: string[];
        light: string[];
        ghost: string[];
        destructive: string[];
    };
}, undefined, (string | string[])[], import('tailwind-variants/dist/config.js').TVConfig<{
    size: {
        sm: string;
        md: string;
        lg: string;
    };
    variant: {
        primary: string[];
        secondary: string[];
        light: string[];
        ghost: string[];
        destructive: string[];
    };
}, {
    size: {
        sm: string;
        md: string;
        lg: string;
    };
    variant: {
        primary: string[];
        secondary: string[];
        light: string[];
        ghost: string[];
        destructive: string[];
    };
}>, unknown, unknown, undefined>>;
interface ButtonProps extends React.ComponentPropsWithoutRef<"button">, VariantProps<typeof buttonVariants> {
    asChild?: boolean;
    isLoading?: boolean;
    loadingText?: string;
}
declare const Button: React.ForwardRefExoticComponent<ButtonProps & React.RefAttributes<HTMLButtonElement>>;
export { Button, buttonVariants, type ButtonProps };
